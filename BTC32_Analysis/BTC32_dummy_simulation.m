% Dummy MATLAB script - analysis of 32BTC Puzzle private keys - simulation
% of the key randomization - inspecting histograms
%
% Donations could be sent here: 1QKjnfVsTT1KXzHgAFUbTy3QbJ2Hgy96WU
% ( i am poor Ukrainian student that will really appreciate your 
% donates - have no home, living in the dorm and trying to cope 
% for the smallest flat in the city - with no success at the moment,
% nearly 10% of desired amount)

%% Clear all
close all;
clear all;
clc;

%% Compose alphas array in a "similar" to BTC32 way
    % Define the maximum integer generated by random generator
    % (BTC 32 have 2^255-2^256 i assume)
MAX_RANDOM_NUMBER = 10^14;
    % Define the maximum used/interesting integer - BTC 32 only the first
    % 160 numbers are interesting now - they are generated by projection
    % of the 2^255 random onto 2^{bits} space by taking the reminder i
    % assume
MAX_INTERESTING_NUMBER = 10^11;
    % Intervals are also growing logarithmic integers like in the BTC32
    % but with a smaller "logarithmic" step - MATLAB random integers are
    % limited to 52 bit
intervals = unique(ceil(logspace(0,log10(MAX_INTERESTING_NUMBER),160)'));
num_raw = randi(MAX_RANDOM_NUMBER,length(intervals),1);

for i=1:length(num_raw)
    num(i) = rem(num_raw(i), intervals(i));
    alpha(i) = num(i) / intervals(i);
end

%% Plot histograms for the first 60 alphas and the last alphas

fig = figure('Position',[10 10 1000 600]);

subplot(2,1,1);

hist(alpha(1:60),100);
title('first 60 alphas');
grid on;

subplot(2,1,2);
hist(alpha(61:end),100);
title('...all remind alphas');
grid on;

saveas(fig, 'alpha_simulation_hist.png');
close(fig)
